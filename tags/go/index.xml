<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>go on 斯是陋室</title>
    <link>https://homily707.github.io/tags/go/</link>
    <description>Recent content in go on 斯是陋室</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 10 Jun 2022 22:39:11 +0800</lastBuildDate><atom:link href="https://homily707.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Client Go</title>
      <link>https://homily707.github.io/posts/k8s/client-go/</link>
      <pubDate>Fri, 10 Jun 2022 22:39:11 +0800</pubDate>
      
      <guid>https://homily707.github.io/posts/k8s/client-go/</guid>
      <description>work queue Queue
queue []t // 定义元素的处理顺序，里面所有元素都应该在 dirty set 中有，而不能出现在 processing set 中 dirty set // 标记所有需要被处理的元素 processing set // 当前正在被处理的元素，当处理完后需要检查该元素是否在 dirty set 中，如果有则添加到 queue 里 DelayingQueue 多了一个AddAfter，每次add加入堆中，每次拿出最早的
RateLimitingQueue。限速队列
Delta FIFO 接口queue
接口store
items map[string]Delta
Delta. 五种type added updated deleted replaced sync . 带一个 interface{}
Pop方法：会阻塞。传入的是一个函数，如果执行失败重新入队
Indexer type Indexer interface { Store Index(indexName string, obj interface{}) ([]interface{}, error) // 根据索引名和给定的对象返回符合条件的所有对象 IndexKeys(indexName, indexedValue string) ([]string, error) // 根据索引名和索引值返回符合条件的所有对象的 key ListIndexFuncValues(indexName string) []string // 列出索引函数计算出来的所有索引值 ByIndex(indexName, indexedValue string) ([]interface{}, error) // 根据索引名和索引值返回符合条件的所有对象 GetIndexers() Indexers // 获取所有的 Indexers，对应 map[string]IndexFunc 类型 AddIndexers(newIndexers Indexers) error // 这个方法要在数据加入存储前调用，添加更多的索引方法，默认只通过 namespace 检索 } type Store interface { Add(obj interface{}) error Update(obj interface{}) error Delete(obj interface{}) error List() []interface{} ListKeys() []string Get(obj interface{}) (item interface{}, exists bool, err error) GetByKey(key string) (item interface{}, exists bool, err error) Replace([]interface{}, string) error Resync() error } // 默认实现类 type cache struct { cacheStorage ThreadSafeStore keyFunc KeyFunc } keyfunc 计算 object的key，然后用ThreadSafeStore存储key：object</description>
    </item>
    
    <item>
      <title>Godis</title>
      <link>https://homily707.github.io/posts/db/godis/</link>
      <pubDate>Fri, 15 Apr 2022 22:54:00 +0800</pubDate>
      
      <guid>https://homily707.github.io/posts/db/godis/</guid>
      <description>TCP bufio.Reader 带缓冲的 reader.ReadString(&amp;quot;\n&amp;quot;). 读到分隔符为止
每个连接 goroutine 处理， waitGroup.add 并且 defer waitGroup.Done ， 主routine出错后也要 waitGroup.wait所有连接处理完
signal.Notify 监听退出信号 并用 chan struct{}. 与主routine通信。主routine 使用&amp;lt;-chan 保证通道只读
粘包
Map 分段锁， 每一个shard内用RwLock。进阶渐进式rehash
操作原子性保证，同时给多个shard上锁。不delete锁，以免并发竞争。避免死锁，先排序shard，保证多个锁获取时，必须按顺序。
AOF 过期时间的逻辑处理
每次set的时候给通道发消息，异步routine处理
aof重写：redis 用的fork。godis用的aof生成副本，和ddl的异步更新有相同的意思
ZSet zset的实现。span实现rank，head虚节点作为首节点
type Level struct { forward *node // forward node has greater score span int64 } type node struct { Element backward *node level []*Level // level[0] is base level } type skiplist struct { header *node tail *node length int64 level int16 } Pipeline client 两个chan</description>
    </item>
    
    <item>
      <title>Bubbletea</title>
      <link>https://homily707.github.io/posts/go/bubbletea/</link>
      <pubDate>Wed, 02 Mar 2022 11:30:22 +0800</pubDate>
      
      <guid>https://homily707.github.io/posts/go/bubbletea/</guid>
      <description>核心逻辑：StartReturningModel()
使用chan来实现定时阻塞和阻塞。用5个通道来生命周期的管理 waitForGoroutines = func(withReadLoop bool) { if withReadLoop { select { case &amp;lt;-p.readLoopDone: case &amp;lt;-time.After(500 * time.Millisecond): // The read loop hangs, which means the input // cancelReader&amp;#39;s cancel function has returned true even // though it was not able to cancel the read. } } &amp;lt;-cmdLoopDone &amp;lt;-resizeLoopDone &amp;lt;-sigintLoopDone &amp;lt;-initSignalDone } /dev/tty 输入 ANSI 控制码，封装了各种操作 Go：select阻塞住等待SIGINT。 signal.Notify(sig, syscall.SIGINT) 多个协程中都在select中加入case &amp;lt;-p.ctx.Done(): ，要退出就一起退出 Go：从通道读取cmd 死循环读取msg和写入cmd，然后update。 </description>
    </item>
    
  </channel>
</rss>
