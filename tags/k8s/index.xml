<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>k8s on 斯是陋室</title>
    <link>https://homily707.github.io/tags/k8s/</link>
    <description>Recent content in k8s on 斯是陋室</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 10 Jun 2022 22:39:11 +0800</lastBuildDate><atom:link href="https://homily707.github.io/tags/k8s/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Client Go</title>
      <link>https://homily707.github.io/posts/k8s/client-go/</link>
      <pubDate>Fri, 10 Jun 2022 22:39:11 +0800</pubDate>
      
      <guid>https://homily707.github.io/posts/k8s/client-go/</guid>
      <description>work queue Queue
queue []t // 定义元素的处理顺序，里面所有元素都应该在 dirty set 中有，而不能出现在 processing set 中 dirty set // 标记所有需要被处理的元素 processing set // 当前正在被处理的元素，当处理完后需要检查该元素是否在 dirty set 中，如果有则添加到 queue 里 DelayingQueue 多了一个AddAfter，每次add加入堆中，每次拿出最早的
RateLimitingQueue。限速队列
Delta FIFO 接口queue
接口store
items map[string]Delta
Delta. 五种type added updated deleted replaced sync . 带一个 interface{}
Pop方法：会阻塞。传入的是一个函数，如果执行失败重新入队
Indexer type Indexer interface { Store Index(indexName string, obj interface{}) ([]interface{}, error) // 根据索引名和给定的对象返回符合条件的所有对象 IndexKeys(indexName, indexedValue string) ([]string, error) // 根据索引名和索引值返回符合条件的所有对象的 key ListIndexFuncValues(indexName string) []string // 列出索引函数计算出来的所有索引值 ByIndex(indexName, indexedValue string) ([]interface{}, error) // 根据索引名和索引值返回符合条件的所有对象 GetIndexers() Indexers // 获取所有的 Indexers，对应 map[string]IndexFunc 类型 AddIndexers(newIndexers Indexers) error // 这个方法要在数据加入存储前调用，添加更多的索引方法，默认只通过 namespace 检索 } type Store interface { Add(obj interface{}) error Update(obj interface{}) error Delete(obj interface{}) error List() []interface{} ListKeys() []string Get(obj interface{}) (item interface{}, exists bool, err error) GetByKey(key string) (item interface{}, exists bool, err error) Replace([]interface{}, string) error Resync() error } // 默认实现类 type cache struct { cacheStorage ThreadSafeStore keyFunc KeyFunc } keyfunc 计算 object的key，然后用ThreadSafeStore存储key：object</description>
    </item>
    
    <item>
      <title>Prometheus</title>
      <link>https://homily707.github.io/posts/k8s/prometheus/</link>
      <pubDate>Sat, 23 Apr 2022 22:39:02 +0800</pubDate>
      
      <guid>https://homily707.github.io/posts/k8s/prometheus/</guid>
      <description>入门Prometheus 架构原理 PromQl grafana 实战 slo metrics exporter microMeters 告警 其他 长尾效应 pushgateway exporter 入门prometheus 架构原理 Prometheus 项目工作的核心，是使用 Pull （抓取）的方式去搜集被监控对象的 Metrics 数据（监控指标数据），然后，再把这些数据保存在一个 TSDB （时间序列数据库，比如 OpenTSDB、InfluxDB 等）当中，以便后续可以按照时间进行检索。grafana通过PromQL查询数据，配置相关的可视化界面。AlertManager负责发出告警。 metrics 来源
来自宿主机的 Node Exporter， 来自API Server的数据监控controller的相关信息 kubelet cAdvisor，k8s核心数据，pod，container cpu等 组件 exporter PromQL 数据类型 counter 只增不减 gauage 可增可减 histogram 分 bucket summary 显示百分位数 筛选 {}通过label 筛选 类似sql的 where。支持正则 返回一个一维数组，瞬时向量 http_requests_total{job=&amp;ldquo;prometheus&amp;rdquo;,group=&amp;ldquo;canary&amp;rdquo;}
向量 [ ] 时间段查询range，返回的是一个二维数组，区间向量。往往需要配合函数使用 http_requests_total{job=&amp;ldquo;prometheus&amp;rdquo;}[5m]
操作符 两个向量之间可以直接 相加相乘相除，但这里需要注意匹配模式。默认是1对1匹配。如果要1对多和多对1，需要额外处理。
聚合操作 聚合操作有些用于瞬时向量 类似于 sql 的 group 比如 sum(http_requests_total) by (code,handler,job,method) 常用的还有 max,min,avg, count_values topk quantile 有些用于区间向量 ，常用 increase、rate、irate 这里有2篇文章详解rate https://www.</description>
    </item>
    
    <item>
      <title>Kubebuilder</title>
      <link>https://homily707.github.io/posts/k8s/kubebuilder/</link>
      <pubDate>Sat, 02 Apr 2022 11:31:44 +0800</pubDate>
      
      <guid>https://homily707.github.io/posts/k8s/kubebuilder/</guid>
      <description>building kubebuilder init --domain tutorial.kubebuilder.io --repo tutorial.kubebuilder.io/project kubebuilder create api --group batch k--version v1 --kind CronJob config/manager: launch your controllers as pods in the cluster config/rbac: permissions required to run your controllers under their own service account config/default contains a Kustomize base for launching the controller in a standard configuration. main Scheme, Kinds 映射到 Go types
manager, 监控 controller，配置 cache client
Api domain tutorial.kubebuilder.io kubebuilder create api --group batch --version v1 --kind CronJob 对应的apiVersion就是 batch.</description>
    </item>
    
  </channel>
</rss>
